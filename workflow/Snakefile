configfile: "config/config.yaml"


import itertools, glob


def expand_from_config(filename):
    return list(
        itertools.chain(
            [
                expand(filename, **config["experiments"][experiment])
                for experiment in config["experiments"]
            ]
        )
    )


sample_complexity_results = expand_from_config(
    "results/{dataset}/statistics/{models}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{grid}.stats.json"
)
individual_plots = expand_from_config(
    "results/{dataset}/plots/individual/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{models}_{grid}.png"
)
by_feature_plots = expand_from_config(
    "results/{dataset}/plots/features/all-features_{features_cni}_{targets}_{targets_cni}_{matching}_{models}_{grid}.png"
)
by_target_plots = expand_from_config(
    "results/{dataset}/plots/targets/{features}_{features_cni}_all-targets_{targets_cni}_{matching}_{models}_{grid}.png"
)
by_model_plots = expand_from_config(
    "results/{dataset}/plots/models/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_all-models_{grid}.png",
)
by_cni_plots = expand_from_config(
    "results/{dataset}/plots/cni/{features}_all-features-cni_{targets}_all-targets-cni_all-matching_{models}_{grid}.png",
)


rule all:
    input:
        sample_complexity_results,
        individual_plots,
        by_feature_plots,
        by_target_plots,
        by_model_plots,
        by_cni_plots,


rule prepare_features_or_targets:
    output:
        npy="results/{dataset}/{features_or_targets}/{name}_none.npy",
    params:
        custom_datasets=config["custom_datasets"],
    conda:
        "envs/environment.yaml"
    script:
        "scripts/prepare_data.py"


rule prepare_covariates:
    output:
        npy="results/{dataset}/covariates/{name}.npy",
    params:
        custom_datasets=config["custom_datasets"],
    conda:
        "envs/environment.yaml"
    script:
        "scripts/prepare_data.py"


rule confound_regression:
    input:
        features=ancient("results/{dataset}/{targets_or_features}/{name}_none.npy"),
        confounds=ancient("results/{dataset}/covariates/{confounds}.npy"),
    output:
        features="results/{dataset}/{targets_or_features}/{name}_{confounds}.npy",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/confound_regression.py"


rule split:
    input:
        features=ancient("results/{dataset}/features/{features}_{features_cni}.npy"),
        targets=ancient("results/{dataset}/targets/{targets}_{targets_cni}.npy"),
        matching=ancient("results/{dataset}/covariates/{matching}.npy"),
    params:
        val_test_frac=config["val_test_frac"],
        val_test_max=config["val_test_max"],
        stratify=config["stratify"],
    output:
        split="results/{dataset}/splits/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{samplesize}_{seed}.json",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/generate_splits.py"


rule fit:
    input:
        features=ancient("results/{dataset}/features/{features}_{features_cni}.npy"),
        targets=ancient("results/{dataset}/targets/{targets}_{targets_cni}.npy"),
        split="results/{dataset}/splits/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{samplesize}_{seed}.json",
        grid="config/grids/{grid}.yaml",
    params:
        existing_scores=lambda wildcards: glob.glob(
            "results/{dataset}/fits/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{samplesize}_{seed}_*.csv".format(
                **wildcards
            )
        ),
    output:
        scores="results/{dataset}/fits/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{samplesize}_{seed}_{grid}.csv",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/fit_model.py"


rule aggregate:
    input:
        scores=expand(
            "results/{{dataset}}/fits/{{model}}/{{features}}_{{features_cni}}_{{targets}}_{{targets_cni}}_{{matching}}_{samplesize}_{seed}_{{grid}}.csv",
            seed=config["seeds"],
            samplesize=config["sample_sizes"],
        ),
    output:
        scores="results/{dataset}/scores/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{grid}.csv",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/aggregate.py"


rule extrapolate:
    input:
        scores="results/{dataset}/scores/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{grid}.csv",
    params:
        bootstrap_repetitions=config["bootstrap_repetitions"],
    output:
        stats="results/{dataset}/statistics/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{grid}.stats.json",
        bootstraps="results/{dataset}/statistics/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{grid}.bootstrap.json",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/extrapolate.py"


rule plot_individually:
    input:
        stats=[
            "results/{dataset}/statistics/{model}/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{grid}.stats.json",
        ],
    params:
        title="{features} (cni={features_cni}) vs<br>{targets} (cni={targets_cni})<br>with matching={matching} using {model}",
        color_variable=None,
        linestyle_variable=None,
    output:
        plot="results/{dataset}/plots/individual/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_{model}_{grid}.png",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule plot_by_features:
    input:
        stats=expand_from_config(
            "results/{{dataset}}/statistics/{{model}}/{features}_{{features_cni}}_{{targets}}_{{targets_cni}}_{{matching}}_{{grid}}.stats.json"
        ),
    params:
        title="all-features (cni={features_cni}) vs<br>{targets} (cni={targets_cni})<br>with matching={matching} using {model}",
        color_variable="features",
        linestyle_variable=None,
    output:
        plot="results/{dataset}/plots/features/all-features_{features_cni}_{targets}_{targets_cni}_{matching}_{model}_{grid}.png",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule plot_by_targets:
    input:
        stats=expand_from_config(
            "results/{{dataset}}/statistics/{{model}}/{{features}}_{{features_cni}}_{targets}_{{targets_cni}}_{{matching}}_{{grid}}.stats.json",
        ),
    params:
        title="{features} (cni={features_cni}) vs<br>all-targets (cni={targets_cni})<br>with matching={matching} using {model}",
        color_variable="target",
        linestyle_variable=None,
    output:
        plot="results/{dataset}/plots/targets/{features}_{features_cni}_all-targets_{targets_cni}_{matching}_{model}_{grid}.png",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule plot_by_models:
    input:
        stats=expand_from_config(
            "results/{{dataset}}/statistics/{models}/{{features}}_{{features_cni}}_{{targets}}_{{targets_cni}}_{{matching}}_{{grid}}.stats.json",
        ),
    params:
        title="{features} (cni={features_cni}) vs<br>{targets} (cni={targets_cni})<br>with matching={matching}",
        color_variable="model",
        linestyle_variable=None,
    output:
        plot="results/{dataset}/plots/models/{features}_{features_cni}_{targets}_{targets_cni}_{matching}_all-models_{grid}.png",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule plot_by_cni:
    input:
        stats=expand_from_config(
            "results/{{dataset}}/statistics/{{model}}/{{features}}_{features_cni}_{{targets}}_{targets_cni}_{matching}_{{grid}}.stats.json",
        ),
    params:
        title="{features} vs {targets}<br>using {model}",
        color_variable="cni",
        linestyle_variable=None,
    output:
        plot="results/{dataset}/plots/cni/{features}_all-features-cni_{targets}_all-targets-cni_all-matching_{model}_{grid}.png",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"
