# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous Integration

on:
  push:
    branches: [ main, chungfan_joss ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version:  ${{ matrix.python-version }}
    - name: Additional info about the build
      shell: bash
      run: |
        uname -a
        df -h
        ulimit -a
    - name: Set up Mamba
      uses: conda-incubator/setup-miniconda@v2
      with:
        mamba-version: "*"
        channels: conda-forge,defaults
        channel-priority: true
        activate-environment: base
        environment-file: environment.yaml
    - name: Install packages
      shell: bash -el {0}
      run: |
        mamba create -c conda-forge -c bioconda -n snakemake snakemake
        conda activate snakemake
        conda info
        conda list
        conda config --show-sources
        conda config --show
        printenv | sort

    - name: Lint with flake8
      run: |
        pip install flake8==4.0.1
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run pytest
      # conda setup requires this special shell
      shell: bash -l {0}
      run: |
        pip install pytest pytest-cov
        pytest tests -r a --cov=esce --cov-report=xml

    - name: Build documentation
      run: |
        pip install sphinx>=1.8 sphinx_rtd_theme
        sphinx-build -M html docs docs/build -qW
        sphinx-build -M html docs docs/build -Eqn -b coverage
        if [[ -s docs/build/html/python.txt ]]
        then
          echo
          echo "Error: Documentation missing:"
          echo
          cat docs/build/html/python.txt
          exit 1
        
    - name: Run example workflow
      shell: bash -l {0}
      run: |
        snakemake --cores 1 --configfile example/example_config.yaml --rerun-triggers mtime --use-conda --rerun-incomplete all
  
    # - name: Coverage
    #   env:
    #     MIN_COVERAGE: "75"

    #   run: |
    #     pip install coverage
    #     if ! coverage report --fail-under="$MIN_COVERAGE" --show-missing
    #     then
    #       echo
    #       echo "Error: Test coverage has to be at least ${MIN_COVERAGE}%"
    #       exit 1
    #     fi